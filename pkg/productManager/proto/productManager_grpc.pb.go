// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductManagerClient is the client API for ProductManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManagerClient interface {
	GetItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Item, error)
	CreateItem(ctx context.Context, in *ItemProfile, opts ...grpc.CallOption) (*Id, error)
	DeleteItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EmptyResponse, error)
	QueryBusinessItems(ctx context.Context, in *BusinessItemsQuery, opts ...grpc.CallOption) (ProductManager_QueryBusinessItemsClient, error)
	GetBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Business, error)
	CreateBusiness(ctx context.Context, in *BusinessProfile, opts ...grpc.CallOption) (*Id, error)
	UpdateBusiness(ctx context.Context, in *BusinessProfile, opts ...grpc.CallOption) (*ItemsAffected, error)
	DeleteBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ItemsAffected, error)
	QueryBusinesses(ctx context.Context, in *BusinessesQuery, opts ...grpc.CallOption) (ProductManager_QueryBusinessesClient, error)
}

type productManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManagerClient(cc grpc.ClientConnInterface) ProductManagerClient {
	return &productManagerClient{cc}
}

func (c *productManagerClient) GetItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) CreateItem(ctx context.Context, in *ItemProfile, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) DeleteItem(ctx context.Context, in *Id, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) QueryBusinessItems(ctx context.Context, in *BusinessItemsQuery, opts ...grpc.CallOption) (ProductManager_QueryBusinessItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductManager_ServiceDesc.Streams[0], "/productManager.ProductManager/QueryBusinessItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &productManagerQueryBusinessItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductManager_QueryBusinessItemsClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type productManagerQueryBusinessItemsClient struct {
	grpc.ClientStream
}

func (x *productManagerQueryBusinessItemsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productManagerClient) GetBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Business, error) {
	out := new(Business)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/GetBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) CreateBusiness(ctx context.Context, in *BusinessProfile, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/CreateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) UpdateBusiness(ctx context.Context, in *BusinessProfile, opts ...grpc.CallOption) (*ItemsAffected, error) {
	out := new(ItemsAffected)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/UpdateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) DeleteBusiness(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ItemsAffected, error) {
	out := new(ItemsAffected)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/DeleteBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) QueryBusinesses(ctx context.Context, in *BusinessesQuery, opts ...grpc.CallOption) (ProductManager_QueryBusinessesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductManager_ServiceDesc.Streams[1], "/productManager.ProductManager/QueryBusinesses", opts...)
	if err != nil {
		return nil, err
	}
	x := &productManagerQueryBusinessesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductManager_QueryBusinessesClient interface {
	Recv() (*Business, error)
	grpc.ClientStream
}

type productManagerQueryBusinessesClient struct {
	grpc.ClientStream
}

func (x *productManagerQueryBusinessesClient) Recv() (*Business, error) {
	m := new(Business)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductManagerServer is the server API for ProductManager service.
// All implementations must embed UnimplementedProductManagerServer
// for forward compatibility
type ProductManagerServer interface {
	GetItem(context.Context, *Id) (*Item, error)
	CreateItem(context.Context, *ItemProfile) (*Id, error)
	DeleteItem(context.Context, *Id) (*EmptyResponse, error)
	QueryBusinessItems(*BusinessItemsQuery, ProductManager_QueryBusinessItemsServer) error
	GetBusiness(context.Context, *Id) (*Business, error)
	CreateBusiness(context.Context, *BusinessProfile) (*Id, error)
	UpdateBusiness(context.Context, *BusinessProfile) (*ItemsAffected, error)
	DeleteBusiness(context.Context, *Id) (*ItemsAffected, error)
	QueryBusinesses(*BusinessesQuery, ProductManager_QueryBusinessesServer) error
	mustEmbedUnimplementedProductManagerServer()
}

// UnimplementedProductManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProductManagerServer struct {
}

func (UnimplementedProductManagerServer) GetItem(context.Context, *Id) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedProductManagerServer) CreateItem(context.Context, *ItemProfile) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedProductManagerServer) DeleteItem(context.Context, *Id) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedProductManagerServer) QueryBusinessItems(*BusinessItemsQuery, ProductManager_QueryBusinessItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryBusinessItems not implemented")
}
func (UnimplementedProductManagerServer) GetBusiness(context.Context, *Id) (*Business, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusiness not implemented")
}
func (UnimplementedProductManagerServer) CreateBusiness(context.Context, *BusinessProfile) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusiness not implemented")
}
func (UnimplementedProductManagerServer) UpdateBusiness(context.Context, *BusinessProfile) (*ItemsAffected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (UnimplementedProductManagerServer) DeleteBusiness(context.Context, *Id) (*ItemsAffected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (UnimplementedProductManagerServer) QueryBusinesses(*BusinessesQuery, ProductManager_QueryBusinessesServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryBusinesses not implemented")
}
func (UnimplementedProductManagerServer) mustEmbedUnimplementedProductManagerServer() {}

// UnsafeProductManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManagerServer will
// result in compilation errors.
type UnsafeProductManagerServer interface {
	mustEmbedUnimplementedProductManagerServer()
}

func RegisterProductManagerServer(s grpc.ServiceRegistrar, srv ProductManagerServer) {
	s.RegisterService(&ProductManager_ServiceDesc, srv)
}

func _ProductManager_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).GetItem(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).CreateItem(ctx, req.(*ItemProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).DeleteItem(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_QueryBusinessItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BusinessItemsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductManagerServer).QueryBusinessItems(m, &productManagerQueryBusinessItemsServer{stream})
}

type ProductManager_QueryBusinessItemsServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type productManagerQueryBusinessItemsServer struct {
	grpc.ServerStream
}

func (x *productManagerQueryBusinessItemsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductManager_GetBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).GetBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/GetBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).GetBusiness(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/CreateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).CreateBusiness(ctx, req.(*BusinessProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/UpdateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).UpdateBusiness(ctx, req.(*BusinessProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/DeleteBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).DeleteBusiness(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_QueryBusinesses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BusinessesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductManagerServer).QueryBusinesses(m, &productManagerQueryBusinessesServer{stream})
}

type ProductManager_QueryBusinessesServer interface {
	Send(*Business) error
	grpc.ServerStream
}

type productManagerQueryBusinessesServer struct {
	grpc.ServerStream
}

func (x *productManagerQueryBusinessesServer) Send(m *Business) error {
	return x.ServerStream.SendMsg(m)
}

// ProductManager_ServiceDesc is the grpc.ServiceDesc for ProductManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productManager.ProductManager",
	HandlerType: (*ProductManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ProductManager_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _ProductManager_CreateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ProductManager_DeleteItem_Handler,
		},
		{
			MethodName: "GetBusiness",
			Handler:    _ProductManager_GetBusiness_Handler,
		},
		{
			MethodName: "CreateBusiness",
			Handler:    _ProductManager_CreateBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _ProductManager_UpdateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _ProductManager_DeleteBusiness_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryBusinessItems",
			Handler:       _ProductManager_QueryBusinessItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryBusinesses",
			Handler:       _ProductManager_QueryBusinesses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/productManager.proto",
}
