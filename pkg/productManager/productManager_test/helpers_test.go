package productManager_test

import (
	"TapMars/admin_gateway/pkg/productManager"
	pb "TapMars/admin_gateway/pkg/productManager/proto"
	"github.com/gin-gonic/gin"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"google.golang.org/genproto/googleapis/type/dayofweek"
	"net/http"
	"net/http/httptest"
)

//goland:noinspection SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection,SpellCheckingInspection
var _ = Describe("Helper Functions", func() {
	var ()
	Describe("Build Business Search", func() {
		It("With No variables", func() {
			req, err := http.NewRequest("GET", "/product-manager/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Name", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("name", "Prox")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal("Prox"))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Name and Sort by Name", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("name", "Prox")
			query.Add("sort", "0")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal("Prox"))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Sort by Favorites", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("sort", "1")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_Favorites))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Sort by Updated", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("sort", "2")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_Updated))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Sort by Created", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("sort", "3")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_Created))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Location", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("latitude", "32.8208751")
			query.Add("longitude", "-94.818466")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(32.8208751))
			Expect(request.LatLng.Longitude).To(Equal(-94.818466))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Location and Distance Filter at None", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("latitude", "32.8208751")
			query.Add("longitude", "-94.818466")
			query.Add("filter-distance", "0")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(32.8208751))
			Expect(request.LatLng.Longitude).To(Equal(-94.818466))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_None))
		})
		It("With Location and Distance Filter at One", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("latitude", "32.8208751")
			query.Add("longitude", "-94.818466")
			query.Add("filter-distance", "1")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(32.8208751))
			Expect(request.LatLng.Longitude).To(Equal(-94.818466))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_One))
		})
		It("With Distance Filter at Five", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("filter-distance", "2")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_Five))
		})
		It("With Distance Filter at Twenty", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("filter-distance", "3")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal(""))
			Expect(request.Sort).To(Equal(pb.Sort_NameRelevance))
			Expect(request.LatLng.Latitude).To(Equal(0.0))
			Expect(request.LatLng.Longitude).To(Equal(0.0))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_Twenty))
		})
		It("With all Variables", func() {
			req, err := http.NewRequest("GET", "/businesses", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("name", "Pro")
			query.Add("sort", "1")
			query.Add("latitude", "32.8208751")
			query.Add("longitude", "-94.818466")
			query.Add("filter-distance", "3")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request, err := productManager.BuildBusinessesQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.Name).To(Equal("Pro"))
			Expect(request.Sort).To(Equal(pb.Sort_Favorites))
			Expect(request.LatLng.Latitude).To(Equal(32.8208751))
			Expect(request.LatLng.Longitude).To(Equal(-94.818466))
			Expect(request.FilterDistance).To(Equal(pb.FilterDistance_Twenty))
		})
	})
	Describe("Build Business Items Search", func() {
		It("With No variables", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			c.Params = []gin.Param{
				{
					Key:   "id",
					Value: "abc",
				},
			}
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.BusinessId).To(Equal("abc"))
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_DAY_OF_WEEK_UNSPECIFIED))
		})
		It("With Day of Week on Unspecified", func() {
			//Below might fail due to url parm with the build func?
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "0")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_DAY_OF_WEEK_UNSPECIFIED))
		})
		It("With Day of Week on Monday", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "1")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_MONDAY))
		})
		It("With Day of Week on Tuesday", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "2")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_TUESDAY))
		})
		It("With Day of Week on Wednesday", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "3")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_WEDNESDAY))
		})
		It("With Day of Week on Thursday", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "4")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_THURSDAY))
		})
		It("With Day of Week on Friday", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "5")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_FRIDAY))
		})
		It("With Day of Week on Saturday", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "6")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_SATURDAY))
		})
		It("With Day of Week on Sunday", func() {
			req, err := http.NewRequest("GET", "/businesses/abc/items", nil)
			Expect(err).ToNot(HaveOccurred())
			query := req.URL.Query()
			query.Add("day-of-week", "7")
			req.URL.RawQuery = query.Encode()
			w := httptest.NewRecorder()
			c, _ := gin.CreateTestContext(w)
			c.Request = req
			request := productManager.BuildBusinessItemsQuery(c)
			Expect(err).ToNot(HaveOccurred())
			Expect(request.DayOfWeek).To(Equal(dayofweek.DayOfWeek_SUNDAY))
		})
	})
})
