// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductManagerClient is the client API for ProductManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManagerClient interface {
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
	SearchBusinessItems(ctx context.Context, in *SearchBusinessItemsRequest, opts ...grpc.CallOption) (*SearchBusinessItemsResponse, error)
	GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error)
	AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*AddBusinessResponse, error)
	UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessResponse, error)
	DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessResponse, error)
	SearchBusinesses(ctx context.Context, in *SearchBusinessesRequest, opts ...grpc.CallOption) (*SearchBusinessesResponse, error)
}

type productManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManagerClient(cc grpc.ClientConnInterface) ProductManagerClient {
	return &productManagerClient{cc}
}

func (c *productManagerClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) SearchBusinessItems(ctx context.Context, in *SearchBusinessItemsRequest, opts ...grpc.CallOption) (*SearchBusinessItemsResponse, error) {
	out := new(SearchBusinessItemsResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/SearchBusinessItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) GetBusiness(ctx context.Context, in *GetBusinessRequest, opts ...grpc.CallOption) (*GetBusinessResponse, error) {
	out := new(GetBusinessResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/GetBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*AddBusinessResponse, error) {
	out := new(AddBusinessResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/AddBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessResponse, error) {
	out := new(UpdateBusinessResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/UpdateBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessResponse, error) {
	out := new(DeleteBusinessResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/DeleteBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagerClient) SearchBusinesses(ctx context.Context, in *SearchBusinessesRequest, opts ...grpc.CallOption) (*SearchBusinessesResponse, error) {
	out := new(SearchBusinessesResponse)
	err := c.cc.Invoke(ctx, "/productManager.ProductManager/SearchBusinesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManagerServer is the server API for ProductManager service.
// All implementations must embed UnimplementedProductManagerServer
// for forward compatibility
type ProductManagerServer interface {
	GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error)
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	SearchBusinessItems(context.Context, *SearchBusinessItemsRequest) (*SearchBusinessItemsResponse, error)
	GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error)
	AddBusiness(context.Context, *AddBusinessRequest) (*AddBusinessResponse, error)
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessResponse, error)
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessResponse, error)
	SearchBusinesses(context.Context, *SearchBusinessesRequest) (*SearchBusinessesResponse, error)
	mustEmbedUnimplementedProductManagerServer()
}

// UnimplementedProductManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProductManagerServer struct {
}

func (UnimplementedProductManagerServer) GetItem(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedProductManagerServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedProductManagerServer) DeleteItem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedProductManagerServer) SearchBusinessItems(context.Context, *SearchBusinessItemsRequest) (*SearchBusinessItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBusinessItems not implemented")
}
func (UnimplementedProductManagerServer) GetBusiness(context.Context, *GetBusinessRequest) (*GetBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusiness not implemented")
}
func (UnimplementedProductManagerServer) AddBusiness(context.Context, *AddBusinessRequest) (*AddBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusiness not implemented")
}
func (UnimplementedProductManagerServer) UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (UnimplementedProductManagerServer) DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (UnimplementedProductManagerServer) SearchBusinesses(context.Context, *SearchBusinessesRequest) (*SearchBusinessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBusinesses not implemented")
}
func (UnimplementedProductManagerServer) mustEmbedUnimplementedProductManagerServer() {}

// UnsafeProductManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManagerServer will
// result in compilation errors.
type UnsafeProductManagerServer interface {
	mustEmbedUnimplementedProductManagerServer()
}

func RegisterProductManagerServer(s grpc.ServiceRegistrar, srv ProductManagerServer) {
	s.RegisterService(&ProductManager_ServiceDesc, srv)
}

func _ProductManager_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).DeleteItem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_SearchBusinessItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBusinessItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).SearchBusinessItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/SearchBusinessItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).SearchBusinessItems(ctx, req.(*SearchBusinessItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_GetBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).GetBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/GetBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).GetBusiness(ctx, req.(*GetBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_AddBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).AddBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/AddBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).AddBusiness(ctx, req.(*AddBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/UpdateBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/DeleteBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManager_SearchBusinesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBusinessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagerServer).SearchBusinesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productManager.ProductManager/SearchBusinesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagerServer).SearchBusinesses(ctx, req.(*SearchBusinessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManager_ServiceDesc is the grpc.ServiceDesc for ProductManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productManager.ProductManager",
	HandlerType: (*ProductManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _ProductManager_GetItem_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _ProductManager_AddItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ProductManager_DeleteItem_Handler,
		},
		{
			MethodName: "SearchBusinessItems",
			Handler:    _ProductManager_SearchBusinessItems_Handler,
		},
		{
			MethodName: "GetBusiness",
			Handler:    _ProductManager_GetBusiness_Handler,
		},
		{
			MethodName: "AddBusiness",
			Handler:    _ProductManager_AddBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _ProductManager_UpdateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _ProductManager_DeleteBusiness_Handler,
		},
		{
			MethodName: "SearchBusinesses",
			Handler:    _ProductManager_SearchBusinesses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/productManager.proto",
}
